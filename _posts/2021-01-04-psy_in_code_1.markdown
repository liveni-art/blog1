---
layout: post
title:  "Психология в коде - 1"
date:   2020-09-12
category: psy_in_code
---
(на самом деле далеко не — «1»)

Что будет, если читать одновременно Питерсона — 12 правил и Совершенный код — главу про классы, абстракции и АТД ?

*Связать всё воедино*
*И трудно удержать. И база, и спонтанность. И ненависть людей. (это тут на первый взгляд ни причём, позже посмотрю, может в тему было).*


## 1. Абстракции в быту.
> Мы предполагаем, что видим предметы и вещи, когда смотрим на мир. Но на самом деле это не так. <...> 

> Представление о том, что сначала мы видим бесполезные сущности, а потом придумываем для них значение, неверно. Мы > воспринимаем значение напрямую. Мы видим полы, по которым можно ходить, двери, в которые можно войти, стулья, на которых > можно сидеть.  <...>  Мы видим инструменты и препятствия, а не предметы и вещи.

Джордан Питерсон, из книги «12 правил жизни. Противоядие от хаоса. Правило 10: Высказывайтесь точнее.»


Смотря на автобус, мы видим не весь автобус. Мы видим его функцию. Ещё мы видим его внешний вид.   
Внешний вид и то, **что** он делает.  
Мы не видим то, **как** он это делает.

Это хорошая абстракция. Она скрывает сложность автобуса. Как устроена машина, почему она едет так быстро. Не особо видим и устройство инфраструктуры общественного транспорта — как им удаётся ходить настолько регулярно и постоянно? 

В основном мы знаем о том, что это довезёт меня из точки А в точку Б, за примерно ожидаемое время. Это хорошая абстракция. 

А когда оно не довозит — то внутренняя сложность прорывается наружу. Мы видим реальную сложность только во время поломки. И мы не хотим её видеть. Это энергетически затратно.

Захватили, например, автобус террористы — и всё. Не довёз. Сломался. Это то, что под капотом абстракции. Пример утрирован и не так удачен.


В книге был пример про автомобиль. Тот пример, конечно, лучше, чем про автобус. Ведь с поломкой автомобиля приходится сталкиваться водителю лично. Она его вовлекает. Тогда автомобиль перестаёт быть просто абстракцией с ожидаемыми функциями.    Мы узнаём, что там под капотом гораздо бОльшая сложность.  Часто такая сложность, с которой мы справляться не умеем.

Бывает, узнаём, что человек, которого мы знали только с одной стороны, оказывается совсем другим.  Это ломает привычный образ мысли.  Это ломает привычные причинно-следственные связи. Это может поменять весь мир в глазах воспринимающего.

Фактически, сами реальные вещи (детали реализации) и не существуют в сознании, пока интерфейс их все инкапсулирует успешно.   Но в некоторые моменты эта сложность проталкивается наружу, и с ней приходится считаться.

Возможно , придётся усовершенствовать понимание этой вещи/этого человека в своей голове.   А возможно, «просто пережить и забыть», и жить как раньше, до следующей нестыковки.

Есть ещё какая-то легенда или байка об индейцах, которые не видели корабль... Потому что «нечем» его воспринять.  Он не был наделён для них функцией.   Это, наверное, байка, ведь как можно его не увидеть?  *ну да ладно*

Но подобное происходит сплошь и рядом. В той же психологии. Часто люди игнорируют опыт, которого сами не имеют. (но это отдельная тема). Слишком часто, и мы все так делаем.   Хотя, в том, чего мы не знаем, скрывается гораздо больше, больше, возможностей, идей, смыслов, понимания, чем в известном. Это логика случайности.
>«Мир прост, только когда он работает»


## 2. Абстракции в коде 
(книга Совершенный Код, глава Классы. Дописать по идее моменты.)

## 3.1. На абстрактном уровне, 1 и 2 — слишком похожи
### (первое логическое ответвление от 1 и 2)
Автомобиль (воспринимаемый) — это абстракция. Это объект, который может под твоим управлением (а нынче — иногда и сам) довезти тебя из точки А в точку Б по дороге.  (это условно. В ином восприятии речь может быть не о передвижении, а например, о статусе. )

Детали реализации этой абстракции — это полностью автомобиль, из какого он материала, его двигатель и вся подкапотная логика,  со всей его сложностью взаимосвязанных частей ( а также цепляющий инфраструктуру, может наличие дорог и автомобильных заводов, точек продажи, труд механиков, конструкторов, достижения науки и техники, позволяющие ему быть и т.д.).  Всё, что позволяет предоставить нам вон ту вышеописанную абстракцию.

И пользуемся мы — абстракцией. Пока она сделает чего-то совсем неожиданного, *выходящего за рамки*.

В быту много хороших абстракций. Может быть, зачастую они не имеют права быть плохими.  Может быть, время и труд отсеяли и усовершенствовали бытовые вещи настолько, что они стали достаточно неплохими абстракциями.

Хотя, говорят, что на самом деле многое из быта спроектировано очень даже неудобно (ссылаясь на книгу «Дизайн привычных вещей», вроде бы).

В коде то же самое. (но там на мой взгляд больше возможностей иметь плохую абстракцию и пользоваться ей, хотя это также неудобно, некрасиво и неправильно).

То же самое в том, что в « хорошем коде» — есть абстракция, и есть детали реализации. И когда абстракция хорошая — то нам не нужно знать детали реализации, чтобы ей пользоваться.

Это такая общемировая инкапсуляция. Просто потому, что наш мозг так работает.   В большей или меньшей степени, но в целом — так.    Кто-то видит больше деталей , кто-то меньше. Но физически около-невозможно видеть их все и понимать их взаимосвязи. 
Поэтому мы упрощаем. И чтобы делать из «кирпичей» дома, мы упрощаем кирпичи. И чтобы делать из «домов» города, мы упрощаем дома. Чтобы они не мешали деталями. Чтобы они были удобными.  *Чтобы с ними было возможным работать. Чтобы они вели себя примерно так, как мы от них ожидаем.*


Но в итоге — что предметы быта, что предметы из кода — это «штуки», состоящие из 
1. абстракции (интерфейса, который мы используем для взаимодействия с этой штукой)
2. деталей реализации (внутреннего устройства, о котором мы не думаем).

То есть, если бы мы умели писать программы не только для компьютерной среды — ограниченной зачастую 2D экраном(ами) и прочими устройствами ввода-вывода? (сейчас конечно это и интернет вещей, и многое ещё — но тем не менее ограниченное компьютерное устройство).     То могли бы эти программируемые вещи быть такими же, как созданные вещественные вещи.    Или это по сути, они и есть.    Просто это речь про инженерию, а программирование — это просто частный случай всех этих вариаций «создания вещей» .    

## 3.2. В программе нужны понятные абстракции, но часто их нет.
### (второе логическое ответвление от 1 и 2)
Они нужны, потому что невозможно уследить за проливающимися наружу деталями реализации. Если сложность возрастает, но недостаточно скрыта за ясными интерфейсами, то её просто нельзя удержать в голове. С ней невозможно работать.

Поначалу, может и можно — но дальше это давит и гнетёт а потом и разрушает. Когда время на поддержку становится настолько большим, что неокупаемым. Понятно, это всё написано в книжках.

Это вообще грустная история, пусть пока останется недописанной.

Мне трудно изложить мысль понятно. 
Тем не менее.

## 4. Слова и интерфейсы. Сознание.
Казалось неожиданным это совпадение:

* В программе бездонная глубина информации инкапсулируется за небольшими абстракциями. Коих много в голове ты не удержишь, но засчёт их упрощённости и отделения «важного» от «неважного» (в каждом конкретном аспекте) этого оказывается достаточно.
    
    Это важно для проектирования хорошей, понятной программы. То есть, это не то, как всё устроено, можно наговнокодить ведь лапши в 30 тысяч строчек.

    Это скорее вещи, которые делают код понятным — у него должны быть простые, понятные, ограниченные интерфейсы. Ну если коротко. И их не должно быть много в каждый отдельный момент.
    
    И за ними скрывается так много — за ними скрывается практически всё, и об этом «всём» в хорошо спроектированной программе должно быть не нужно думать в момент работы с конкретными интерфейсами.

* И в речи в обыденной жизни бездонная глубина информации скрывается за — словами. Слова это тоже небольшие абстракции. Очень похожие на интерфейсы в программировании.  И за их пределами скрывается «то, что неважно» (то, о чём можно не думать на конкретный момент оперирования этим словом).

    Поэтому, когда думаешь не-словами, и ещё и если отключить эмоции, то холодный анализ, он даёт много новой информации — которая раньше была скрыта за этими словами.   А ведь они не могут выразить всё.   Они могут скрыть и то, что важно, тоже.   Как любой неидеальный инструмент. Даже созданный эволюцией, в общем, это прекрасно.
    
Но почему слова и интерфейсы так похожи? Казалось бы, разные области... очень. Откуда такое совпадение структуры?

У меня есть предположение. Возможно, потому что так работает человеческое сознание. Ему необходима «упрощёнка», чтобы понимать. Ему необходимы простые интерфейсы, и слова это частный случай таких интерфейсов. Объект должен быть чем-то ограничен, чтобы быть понимаемым. [Кстати, имхо и психологические границы должны быть чем-то ограничены, чтобы ты был понимаем (но это другая тема просто).](https://mak987.livejournal.com/81012.html)

Сознание больше 6-8 элементов в один момент времени — не удерживает.

Коммуникация получается эффективнее, если говорить словами.

А, ещё, потому что код это тоже коммуникация. Серьёзный аспект хорошо спроектированного кода — это — чтобы он был понятным (это и есть — коммуникация с другими программистами посредством кода, в том числе с собой будущим).      Чтобы писать прогу только для машины, это всё не нужно, она прочитает и те самые 30 тысяч строчек и даже больше без интерфейсов и вообще машинным кодом.

Это всё нужно только, чтобы человеческое сознание могло разрабатывать/поддерживать программу наиболее эффективно.

И слова нужны тоже для этого — чтобы коммуницировать с другими людьми. В том числе собой. Чтобы структурировать информацию.

То есть это как бы (возможно, что единственный — но хз) вид структурирования информации, позволяющий сознанию с ней условно-эффективно оперировать.

Абстракции и инкапсуляции — это методы работы сознания, связанные с его наверное просто устройством. Поэтому так и сложилось.

Всё.